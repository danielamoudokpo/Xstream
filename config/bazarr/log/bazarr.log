05/01/2023 00:37:21|ERROR   |apscheduler.executors.default   |Job "Update Movie list from Radarr (trigger: interval[1:00:00], next run at: 2023-01-05 01:37:21 GMT)" raised an exception|'Traceback (most recent call last):\n  File "/app/bazarr/bin/bazarr/../libs/requests/models.py", line 971, in json\n    return complexjson.loads(self.text, **kwargs)\n  File "/usr/lib/python3.10/json/__init__.py", line 346, in loads\n    return _default_decoder.decode(s)\n  File "/usr/lib/python3.10/json/decoder.py", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File "/usr/lib/python3.10/json/decoder.py", line 355, in raw_decode\n    raise JSONDecodeError("Expecting value", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "/app/bazarr/bin/bazarr/radarr/info.py", line 32, in version\n    radarr_json = requests.get(rv, timeout=60, verify=False, headers=headers).json()\n  File "/app/bazarr/bin/bazarr/../libs/requests/models.py", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nrequests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File "/app/bazarr/bin/bazarr/../libs/apscheduler/executors/base.py", line 125, in run_job\n    retval = job.func(*job.args, **job.kwargs)\n  File "/app/bazarr/bin/bazarr/radarr/sync/movies.py", line 27, in update_movies\n    check_radarr_rootfolder()\n  File "/app/bazarr/bin/bazarr/radarr/rootfolder.py", line 59, in check_radarr_rootfolder\n    get_radarr_rootfolder()\n  File "/app/bazarr/bin/bazarr/radarr/rootfolder.py", line 19, in get_radarr_rootfolder\n    if get_radarr_info.is_legacy():\n  File "/app/bazarr/bin/bazarr/radarr/info.py", line 56, in is_legacy\n    radarr_version = self.version()\n  File "/app/bazarr/bin/bazarr/radarr/info.py", line 40, in version\n    radarr_version = requests.get(rv, timeout=60, verify=False, headers=headers).json()[\'version\']\nKeyError: \'version\''|
